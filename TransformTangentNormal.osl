shader TransformTangentNormal2(
    color normal_input = normal(0,0,1)
    [[string label = "Normal Texture"]],
    vector tangent_in = 0
    [[string label="Tangent In"]],
    matrix tangent_space = matrix(1)
    [[string label = "Tangent Space"]],
    output normal transformed_normal = normal(0,0,1)
)
{
    vector T = select(normalize(dPdu), tangent_in, isconnected(tangent_in));
    vector B = cross(T, Ng);

    matrix TBN = isconnected(tangent_space) ? matrix(
        T.x,  T.y,  T.z,  0,
        B.x,  B.y,  B.z,  0,
        Ng.x, Ng.y, Ng.z, 0,
        0,    0,    0,    1
    ) : matrix(1);

    vector unbiased_normal = normalize(normal_input * vector(2) - vector(1));

    vector result = normalize(transform(tangent_space / TBN, unbiased_normal));

    transformed_normal = (result + vector(1)) * vector(0.5);
}